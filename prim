#include <OpenGL/gl.h>

#include <OpenGl/glu.h>

#include <GLUT/glut.h>

#include<iostream>

using namespace std;
/* Handler for window-repaint event. Call back when the window first appears and
   whenever the window needs to be re-painted. */
void display() {
   glClearColor(0.0f, 0.0f, 0.0f, 1.0f); // Set background color to black and opaque
   glClear(GL_COLOR_BUFFER_BIT);         // Clear the color buffer
        glBegin(GL_POINTS);
       glColor3f(0.0f, 1.0f, 0.0f);
    glVertex2f(50, 300);
    glVertex2f(90, 350);
    glVertex2f(90, 275);
    glVertex2f(130, 350);
    glVertex2f(130, 305);
        glEnd();
    
    glBegin(GL_LINES);
    glVertex2f(170, 350);
    glVertex2f(250, 300);
    glVertex2f(180, 300);
    glVertex2f(250, 350);
    glVertex2f(280, 330);
    glVertex2f(260, 300);
    glEnd();
    glBegin(GL_LINE_STRIP);
    glVertex2f(290, 300);
    glVertex2f(320, 350);
    glVertex2f(330, 310);
    glVertex2f(380, 350);
    glVertex2f(400, 300);
    glVertex2f(360, 350);
    glVertex2f(370, 300);
    glEnd();
    glBegin(GL_LINE_LOOP);
    glVertex2f(50,200);
    glVertex2f(45, 250);
    glVertex2f(100, 250);
    glVertex2f(120, 230);
    glVertex2f(80, 190);
    glVertex2f(80, 200);
    glVertex2f(50, 200);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(160,200);
    glVertex2f(180,250);
//    glVertex2f(240,250);
//    glVertex2f(270, 200);
    glVertex2f(200, 220);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(240,250);
    glVertex2f(270, 200);
    glVertex2f(200, 220);
    glEnd();
    glBegin(GL_POLYGON);
    glVertex2f(180,250);
    glVertex2f(240,250);
    glVertex2f(200, 220);
    glEnd();
    glBegin(GL_QUADS);
    glVertex2f(300,250);
    glVertex2f(350,270);
    glVertex2f(400,240);
    glVertex2f(350,220);
    glEnd();
    glBegin(GL_QUADS);
    glVertex2f(420,250);
    glVertex2f(470,250);
    glVertex2f(450,220);
    glVertex2f(420,220);
    glEnd();
//    glBegin(GL_QUADS_STRIP);
//    glVertex2f();
//    glEnd();
   // Draw a Red 1x1 Square centered at origin
//   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
//      glColor3f(0.0f, 1.0f, 0.0f); // Red
//      glVertex2f(100.5f, 100.5f);    // x, y
//      glVertex2f( 100.5f, 200.5f);
//      glVertex2f( 200.5f,  200.5f);
//      glVertex2f(250.5,  100.5f);
//   glEnd();
//    glBegin(GL_QUAD_STRIP);              // Each set of 4 vertices form a quad
//       glColor3f(0.0f, 1.0f, 0.0f); // Red
//       glVertex2f(100.5f, 100.5f);    // x, y
//       glVertex2f( 100.5f, 200.5f);
//       glVertex2f( 200.5f,  200.5f);
//       glVertex2f(250.5,  100.5f);
//    glEnd();
    

//    glBegin(GL_LINES);
//    glColor3f(0.0, 1.0, 0.0);
//    glVertex2f(55.0, 40.0);
//    glVertex2f(55.0, 70.0);
//    glVertex2f(45.0, 95.0);
//    glVertex2f(45.0, 120.0);
//    glVertex2f(45.0, 120.0);
//    glVertex2f(50.0, 120.0);
//    glVertex2f(50.0, 120.0);
//    glVertex2f(50.0, 100.0);
//    glVertex2f(85.0, 70.0);
//    glVertex2f(85.0, 90.0);
//    glVertex2f(90.0, 80.0);
//    glVertex2f(80.0, 80.0);
//    glVertex2f(90.0, 90.0);
//    glVertex2f(80.0, 90.0);
//    glVertex2f(90.0, 90.0);
//    glVertex2f(90.0, 70.0);
//    glVertex2f(80.0, 90.0);
//    glVertex2f(80.0, 70.0);
//    glVertex2f(90.0, 70.0);
//    glVertex2f(80.0, 70.0);
//    glVertex2f(55.0, 70.0);
//    glVertex2f(70.0, 70.0);
//    glVertex2f(70.0, 70.0);
//    glVertex2f(70.0, 40.0);
//    glVertex2f(100.0, 40.0);
//    glVertex2f(100.0, 90.0);
//    glVertex2f(70.0, 120.0);
//    glVertex2f(40.0, 90.0);
//    glEnd();
//    glBegin(GL_LINE_STRIP);
//    glColor3f(0.0, 1.0, 0.0);
//    glVertex2f(40.0, 40.0);
//    glVertex2f(100.0, 40.0);
//    glVertex2f(100.0, 90.0);
//    glVertex2f(70.0, 120.0);
//    glVertex2f(40.0, 90.0);
//    glEnd();
//    glBegin(GL_LINE_LOOP);
//    glVertex2f(40.0, 40.0);
//    glVertex2f(100.0, 40.0);
//    glVertex2f(100.0, 90.0);
//    glVertex2f(70.0, 120.0);
//    glVertex2f(40.0, 90.0);
//    glEnd();
//    glBegin(GL_TRIANGLES);
//    glColor3f(0.0f, 1.0f, 0.0f);
//   glVertex2f(100.0f, 100.0f);
//  glVertex2f(200.0f, 300.0f);
//    glVertex2f(300.0f, 100.0f);
//    glEnd();
//        glBegin(GL_TRIANGLE_FAN);              // Each set of 4 vertices form a quad
//           glColor3f(1.0f, 1.0f, 0.0f); // Red
//           glVertex2f(100.0f, 100.0f);    // x, y
//           glVertex2f( 200.0f, 100.0f);
//           glVertex2f( 200.0f,  300.0f);
//           glVertex2f(150.0f,  400.0f);
//           glVertex2f(100.0f,  450.0f);
//           glVertex2f(50.0f,  150.0f);
//        glEnd();
//    glBegin(GL_LINES);
//    glColor3f(0.0f, 1.0f, 0.0f);
//    glVertex2f(100.0f, 100.0f);    // x, y
//    glVertex2f( 200.0f, 100.0f);
//    glVertex2f(100.0f, 100.0f);    // x, y
//    glVertex2f( 200.0f, 300.0f);
//    glVertex2f(200.0f, 300.0f);    // x, y
//    glVertex2f( 200.0f, 100.0f);
//    glVertex2f(100.0f, 100.0f);
//    glVertex2f(150.0f, 400.0f);
//    glVertex2f(100.0f, 100.0f);
//    glVertex2f(100.0f, 450.0f);
//    glEnd();
//    glBegin(GL_TRIANGLE_STRIP);              // Each set of 4 vertices form a quad
//       glColor3f(1.0f, 1.0f, 0.0f); // Red
//       glVertex2f(100.0f, 100.0f);    // x, y
//       glVertex2f( 200.0f, 100.0f);
//       glVertex2f( 200.0f,  300.0f);
//       glVertex2f(150.0f,  400.0f);
//       glVertex2f(100.0f,  450.0f);
//       glVertex2f(50.0f,  150.0f);
//    glEnd();
   glFlush();  // Render now
}
void line (int x1, int y1, int x2, int y2)
{
    glClear(GL_COLOR_BUFFER_BIT);
    //glColor3f(0.0,0.0,1.0);
    glBegin(GL_POINTS);
    float y, m, c;
    //int x1 = 250,y1 = 100,x2 = 356,y2 = 180;
    float dx = x2 -x1;
    float dy = y2 - y1;
    m = dy/dx;
    c = y1-m*x1;
    for (int x=x1;x<=x2;x++){
        y = m*x + c;
        glVertex2f(x, y);
    }
    glEnd();
    glFlush();
}
void ew()
{
    int x1,y1,x2,y2;
    cout<<"enter points";
    cin>>x1>>y1>>x2>>y2;
    line(x1,y1,x2,y2);
}
void myinit() {
glClearColor(1.0, 1.0, 1.0, 0.0);
glColor3f(1.0, 0.0, 0.0);
glPointSize(2.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
gluOrtho2D(0.0, 499.0, 0.0, 499.0);
//gluOrtho2D(-780, 780, -420, 420);
}
/* Main function: GLUT runs as a console application starting at main()  */
int main(int argc, char** argv) {
   glutInit(&argc, argv);
   glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);// Initialize GLUT
   glutCreateWindow("Yamini"); // Create a window with the given title
   glutInitWindowSize(640, 320);   // Set the window's initial width & height
   glutInitWindowPosition(50, 50); // Position the window's initial top-left corner
   glutDisplayFunc(display); // Register display callback handler for window re-paint
   //glutDisplayFunc(ew);
   myinit();
   glutMainLoop();           // Enter the infinitely event-processing loop
   return 0;
}
